// 简化版二维码生成器
(function(global) {
    'use strict';
    
    const QRCode = {
        // 生成二维码的主函数
        toCanvas: function(canvas, text, options, callback) {
            if (typeof options === 'function') {
                callback = options;
                options = {};
            }
            
            options = options || {};
            const size = options.width || 256;
            const margin = options.margin || 4;
            const color = {
                dark: options.color?.dark || '#000000',
                light: options.color?.light || '#ffffff'
            };
            
            try {
                // 使用简单的方法生成二维码数据
                const qrData = this.generateQRData(text);
                this.renderCanvas(canvas, qrData, size, margin, color);
                if (callback) callback(null);
            } catch (error) {
                if (callback) callback(error);
            }
        },
        
        // 生成二维码数据矩阵（简化版）
        generateQRData: function(text) {
            // 这是一个简化的二维码生成算法
            // 实际应用中应该使用完整的QR码算法
            const size = 21; // 最小的QR码尺寸
            const data = [];
            
            // 初始化数据矩阵
            for (let i = 0; i < size; i++) {
                data[i] = [];
                for (let j = 0; j < size; j++) {
                    data[i][j] = 0;
                }
            }
            
            // 添加定位标记（简化版）
            this.addPositionMarkers(data, size);
            
            // 添加数据（简化版 - 基于文本生成模式）
            this.addData(data, text, size);
            
            return data;
        },
        
        // 添加定位标记
        addPositionMarkers: function(data, size) {
            const positions = [
                [0, 0], [0, size - 7], [size - 7, 0]
            ];
            
            positions.forEach(([x, y]) => {
                for (let i = 0; i < 7; i++) {
                    for (let j = 0; j < 7; j++) {
                        if (x + i < size && y + j < size) {
                            const isEdge = i === 0 || i === 6 || j === 0 || j === 6;
                            const isInner = (i >= 2 && i <= 4) && (j >= 2 && j <= 4);
                            data[x + i][y + j] = isEdge || isInner ? 1 : 0;
                        }
                    }
                }
            });
        },
        
        // 添加数据（简化版）
        addData: function(data, text, size) {
            // 简单的数据编码方式
            const hash = this.simpleHash(text);
            let bitIndex = 0;
            
            for (let i = 0; i < size; i++) {
                for (let j = 0; j < size; j++) {
                    // 跳过已被定位标记占用的位置
                    if (this.isPositionMarker(i, j, size)) {
                        continue;
                    }
                    
                    // 根据hash和位置生成数据
                    const bit = (hash >> (bitIndex % 32)) & 1;
                    data[i][j] = bit;
                    bitIndex++;
                }
            }
        },
        
        // 检查是否为定位标记位置
        isPositionMarker: function(x, y, size) {
            return (x < 9 && y < 9) || 
                   (x < 9 && y >= size - 8) || 
                   (x >= size - 8 && y < 9);
        },
        
        // 简单hash函数
        simpleHash: function(str) {
            let hash = 0;
            for (let i = 0; i < str.length; i++) {
                const char = str.charCodeAt(i);
                hash = ((hash << 5) - hash) + char;
                hash = hash & hash; // 转换为32位整数
            }
            return Math.abs(hash);
        },
        
        // 渲染到Canvas
        renderCanvas: function(canvas, data, size, margin, color) {
            const ctx = canvas.getContext('2d');
            const moduleSize = size / (data.length + 2 * margin);
            
            canvas.width = size;
            canvas.height = size;
            
            // 清空画布并设置背景色
            ctx.fillStyle = color.light;
            ctx.fillRect(0, 0, size, size);
            
            // 绘制二维码模块
            ctx.fillStyle = color.dark;
            for (let i = 0; i < data.length; i++) {
                for (let j = 0; j < data[i].length; j++) {
                    if (data[i][j]) {
                        const x = (j + margin) * moduleSize;
                        const y = (i + margin) * moduleSize;
                        ctx.fillRect(x, y, moduleSize, moduleSize);
                    }
                }
            }
        },
        
        // 生成DataURL
        toDataURL: function(text, options, callback) {
            if (typeof options === 'function') {
                callback = options;
                options = {};
            }
            
            const canvas = document.createElement('canvas');
            this.toCanvas(canvas, text, options, function(error) {
                if (error) {
                    callback(error);
                } else {
                    callback(null, canvas.toDataURL());
                }
            });
        }
    };
    
    // 导出到全局对象
    if (typeof module !== 'undefined' && module.exports) {
        module.exports = QRCode;
    } else {
        global.QRCode = QRCode;
    }
    
})(typeof window !== 'undefined' ? window : this); 